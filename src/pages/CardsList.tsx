import { Badge } from "../components/Badge";
import {FC, useContext, useState} from "react";
import {Card} from "../components/Card";
import {CardOverview} from "../components/CardOverview";
import {Context} from "../index";

export const lotteries = [
    {
        id: 'goldRush',
        type: 'coin',
        name: 'üí∞ Gold Rush',
        description: '–°–ø—Ä–æ–±—É–π —Å–≤–æ—é —É–¥–∞—á—É —É –∑–æ–ª–æ—Ç—ñ–π –ª–∏—Ö–æ–º–∞–Ω—Ü—ñ!',
        image: '/goldRush.png',
        imageLogo: '/goldRush-logo.png',
        rules: '–°–æ—Ç—Ä–∏ –æ–¥–Ω–µ –∑ —Ç—Ä—å–æ—Ö –ø–æ–ª—ñ–≤. –Ø–∫—â–æ –≤–∏–ø–∞–¥–µ "üí∞", –æ—Ç—Ä–∏–º—É—î—à –Ω–∞–≥–æ—Ä–æ–¥—É.',
        cost: 500,
        hourlyProfit: 50,
        experience: 50,
        numberCount: 3,
        failChance: 0.2,
        rewardTiers: [
            { amount: 500, chance: 0.6 },
            { amount: 1000, chance: 0.5 },
            { amount: 2500, chance: 0.5 },
            { amount: 5000, chance: 0.5 }
        ]
    },
    {
        id: 'luckyClover',
        name: 'üçÄ Lucky Clover',
        description: '–ö–ª–∞—Å–∏—á–Ω–∞ –ª–æ—Ç–µ—Ä–µ—è –∑ –≤–µ—Å–µ–ª–∏–º –¥–∏–∑–∞–π–Ω–æ–º. –ë—ñ–ª—å—à–µ —à–∞–Ω—Å—ñ–≤ –Ω–∞ –≤–∏–≥—Ä–∞—à!',
        image: '/luckyClover.png',
        imageLogo: '/luckyClover-logo.png',
        rules: '–°–æ—Ç—Ä–∏ –æ–¥–Ω–µ –ø–æ–ª–µ. –Ø–∫—â–æ –≤–∏–ø–∞–¥–µ "üçÄ", –æ—Ç—Ä–∏–º–∞—î—à –Ω–∞–≥–æ—Ä–æ–¥—É.',
        cost: 200,
        hourlyProfit: 20,
        experience: 20,
        numberCount: 4,
        type: 'coin',
        failChance: 0.3,
        rewardTiers: [
            { amount: 200, chance: 0.6 },
            { amount: 500, chance: 0.5 },
            { amount: 1000, chance: 0.5 },
            { amount: 2000, chance: 0.5 }
        ]
    },
    {
        id: 'cosmicSpin',
        name: 'üåå Cosmic Spin',
        description: '–ì–∞–ª–∞–∫—Ç–∏—á–Ω–∞ –ª–æ—Ç–µ—Ä–µ—è –¥–ª—è —Å–ø—Ä–∞–≤–∂–Ω—ñ—Ö –º—Ä—ñ–π–Ω–∏–∫—ñ–≤.',
        image: '/cosmicSpin.png',
        imageLogo: '/cosmicSpin-logo.png',
        rules: '–û–±–µ—Ä–Ω–∏ –∫–æ–ª–µ—Å–æ ‚Äî —ñ –æ—Ç—Ä–∏–º–∞–π –º–æ–Ω–µ—Ç–∏, —Ç–æ–∫–µ–Ω–∏ –∞–±–æ –Ω–∞–≤—ñ—Ç—å —É–Ω—ñ–∫–∞–ª—å–Ω—ñ –ø—Ä–µ–¥–º–µ—Ç–∏.',
        cost: 10000,
        hourlyProfit: 100,
        experience: 100,
        numberCount: 4,
        type: 'coin',
        failChance: 0.25,
        rewardTiers: [
            { amount: 10000, chance: 0.5 },
            { amount: 25000, chance: 0.5 },
            { amount: 50000, chance: 0.5 },
            { amount: 100000, chance: 0.5 },

        ]
    },
    {
        id: 'fruitJackpot',
        name: 'üçì Fruit Jackpot',
        description: '–§—Ä—É–∫—Ç–æ–≤–∏–π —Ä–∞–π! –Ø–∫—â–æ –≤–∏–ø–∞–¥–µ —Ç—Ä–∏ –æ–¥–Ω–∞–∫–æ–≤—ñ —Ñ—Ä—É–∫—Ç–∏ ‚Äî —Ç–∏ –≤–∏–≥—Ä–∞–≤!',
        image: '/fruitJackpot.png',
        imageLogo: '/fruitJackpot-logo.png',
        rules: '–û–±–µ—Ä–∏ 3 –∑ 6 —Ñ—Ä—É–∫—Ç—ñ–≤. –Ø–∫—â–æ –≤—Å—ñ –æ–¥–Ω–∞–∫–æ–≤—ñ ‚Äî –æ—Ç—Ä–∏–º–∞—î—à —Å—É–ø–µ—Ä–Ω–∞–≥–æ—Ä–æ–¥—É!',
        cost: 300,
        hourlyProfit: 30,
        experience: 30,
        numberCount: 6,
        type: 'coin',
        failChance: 0.5,
        rewardTiers: [
            { amount: 300, chance: 0.6 },
            { amount: 1000, chance: 0.5 },
            { amount: 1500, chance: 0.5 },
            { amount: 3000, chance: 0.5 }
        ]
    },
    {
        id: 'mysteryBox',
        name: 'üéÅ Mystery Box',
        description: '–ù—ñ—Ö—Ç–æ –Ω–µ –∑–Ω–∞—î, —â–æ –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ... –ü–æ–¥–∞—Ä—É–Ω–æ–∫ –∞–±–æ –Ω—ñ—á–æ–≥–æ?',
        image: '/mysteryBox.png',
        imageLogo: '/mysteryBox-logo.png',
        rules: '–ö—É–ø–∏ –∫–æ—Ä–æ–±–∫—É ‚Äî –≤—ñ–¥–∫—Ä–∏–π. –ú–æ–∂–µ –±—É—Ç–∏ –≤–µ–ª–∏–∫–∏–π –≤–∏–≥—Ä–∞—à –∞–±–æ –ø–æ—Ä–æ–∂–Ω—è –∫–æ—Ä–æ–±–∫–∞.',
        cost: 400,
        hourlyProfit: 40,
        experience: 40,
        numberCount: 8,
        type: 'coin',
        failChance: 0.4,
        rewardTiers: [
            { amount: 400, chance: 0.6 },
            { amount: 1000, chance: 0.5 },
            { amount: 2000, chance: 0.5 },
            { amount: 4000, chance: 0.5 }
        ]
    },
    {
        id: 'cryptoIce',
        type: 'usdt',
        name: 'üßä Crypto Ice',
        description: '–ó–∞–º–æ—Ä–æ–∂–µ–Ω–∏–π –≤–∏–≥—Ä–∞—à —á–µ–∫–∞—î —Ç–µ–±–µ. –†–æ–∑–±–∏–π –ª—ñ–¥!',
        image: '/cryptoIce.png',
        imageLogo: '/cryptoIce-logo.png',
        rules: '–ó—ñ—Ç—Ä–∏ –∫—É–±–∏–∫–∏ –ª—å–æ–¥—É',
        cost: 5,
        hourlyProfit: 50,
        experience: 50,
        numberCount: 4,
        failChance: 0.3,
        rewardTiers: [
            { amount: 5, chance: 0.5 },
            { amount: 10, chance: 0.4 },
            { amount: 25, chance: 0.3 },
            { amount: 100, chance: 0.1 }
        ]
    },
    {
        id: 'stellarFortune',
        type: 'usdt',
        name: 'üåå Stellar Fortune',
        description: '–ó—ñ—Ç—Ä–∏ –∑—ñ—Ä–∫—É ‚Äî –º–æ–∂–µ, —Å–∞–º–µ —Ü—è –∑—ñ—Ä–∫–∞ –ø—Ä–∏–Ω–µ—Å–µ —Ç–æ–±—ñ —â–∞—Å—Ç—è!',
        image: '/stellarFortune.png',
        imageLogo: '/stellarFortune-logo.png',
        rules: '–ó—ñ—Ç—Ä–∏ –∑—ñ—Ä–∫—É. –£ –Ω—ñ–π –º–æ–∂–µ –±—É—Ç–∏ –≤—ñ–¥ 10 –¥–æ 500 USDT!',
        cost: 10,
        hourlyProfit: 100,
        experience: 100,
        numberCount: 5,
        failChance: 0.5,
        rewardTiers: [
            { amount: 10, chance: 0.4 },
            { amount: 50, chance: 0.3 },
            { amount: 200, chance: 0.2 },
            { amount: 300, chance: 0.1 }
        ]
    },
    {
        id: 'usdtInferno',
        type: 'usdt',
        name: 'üî• USDT Inferno',
        description: '–ì–∞—Ä—è—á–∞ –ª–æ—Ç–µ—Ä–µ—è –∑ –ø–∞–ª–∞—é—á–∏–º —à–∞–Ω—Å–æ–º –≤–∏–≥—Ä–∞—Ç–∏ –≤–µ–ª–∏–∫–∏–π –∫—É—à!',
        image: '/usdtInferno.png',
        imageLogo: '/usdtInferno-logo.png',
        rules: '–ó—ñ—Ç—Ä–∏ –≤–æ–≥–Ω—è–Ω—ñ –ø–æ–ª—è.',
        cost: 20,
        hourlyProfit: 200,
        experience: 200,
        numberCount: 4,
        failChance: 0.4,
        rewardTiers: [
            { amount: 20, chance: 0.4 },
            { amount: 50, chance: 0.3 },
            { amount: 100, chance: 0.2 },
            { amount: 500, chance: 0.1 }
        ]
    },
    {
        id: 'redEnvelope',
        type: 'usdt',
        name: 'üßß Red Envelope',
        description: '–ö–∏—Ç–∞–π—Å—å–∫–∞ —Ç—Ä–∞–¥–∏—Ü—ñ—è –∑ —Å—é—Ä–ø—Ä–∏–∑–æ–º. –ê–ª–µ –Ω–µ –≤—Å—ñ –∫–æ–Ω–≤–µ—Ä—Ç–∏ –≤–∏–≥—Ä–∞—à–Ω—ñ!',
        image: '/redEnvelope.png',
        imageLogo: '/redEnvelope-logo.png',
        rules: '–£–¥–∞—á–∞ –ø–æ—Å–º—ñ—Ö–Ω–µ—Ç—å—Å—è –Ω–∞–π—Ö–æ—Ä–æ–±—Ä—ñ—à–∏–º.',
        cost: 50,
        hourlyProfit: 500,
        experience: 500,
        numberCount: 6,
        failChance: 0.6,
        rewardTiers: [
            { amount: 50, chance: 0.3 },
            { amount: 100, chance: 0.3 },
            { amount: 500, chance: 0.2 },
            { amount: 1000, chance: 0.2 }
        ]
    },
    {
        id: 'diamondVault',
        type: 'usdt',
        name: 'üíé Diamond Vault',
        description: '–°–µ–∫—Ä–µ—Ç–Ω–∏–π —Å–µ–π—Ñ —ñ–∑ –±–∞–≥–∞—Ç—Å—Ç–≤–æ–º. –ê–ª–µ –ª–∏—à–µ –æ–¥–∏–Ω —ñ–∑ –∫–ª—é—á—ñ–≤ —Å–ø—Ä–∞–≤–∂–Ω—ñ–π!',
        image: '/diamondVault.png',
        imageLogo: '/diamondVault-logo.png',
        rules: '–ó—ñ—Ç—Ä–∏ –∫–ª—é—á—ñ.',
        cost: 100,
        hourlyProfit: 1000,
        experience: 1000,
        numberCount: 3,
        failChance: 0.7,
        rewardTiers: [
            { amount: 100, chance: 0.2 },
            { amount: 150, chance: 0.2 },
            { amount: 500, chance: 0.1 },
            { amount: 1000, chance: 0.05 }
        ]
    },
    {
        id: 'birthdayBlast',
        type: 'gift',
        name: 'üéÇ Birthday Blast',
        description: '–°—é—Ä–ø—Ä–∏–∑ –¥–æ –¥–Ω—è –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è! –ü–æ–¥–∞—Ä—É–π –¥—Ä—É–∑—è–º —à–∞–Ω—Å –∑—ñ—Ä–≤–∞—Ç–∏ –∫—É—à üéâ',
        image: '/birthdayBlast.png',
        imageLogo: '/birthdayBlast-logo.png',
        rules: '–°–æ—Ç—Ä–∏ 3 —á–∏—Å–ª–∞. –Ø–∫—â–æ –∑–±—ñ–≥–∞—é—Ç—å—Å—è –∑ –≤–∏–≥—Ä–∞—à–Ω–∏–º–∏ ‚Äî –æ—Ç—Ä–∏–º–∞—î—à –ø–æ–¥–∞—Ä—É–Ω–æ–∫!',
        cost: 5,
        hourlyProfit: 100,
        experience: 100,
        numberCount: 3,
        failChance: 0.3,
        rewardTiers: [
            { amount: 5, chance: 0.5 },
            { amount: 10, chance: 0.3 },
            { amount: 50, chance: 0.2 },
            { amount: 100, chance: 0.1 }
        ]
    },
    {
        id: 'secretSurprise',
        type: 'gift',
        name: 'üéÅ Secret Surprise',
        description: '–ù–µ—Å–ø–æ–¥—ñ–≤–∞–Ω–∫–∞ –¥–ª—è –¥—Ä—É–≥–∞ ‚Äî –≤—ñ–¥–∫—Ä–∏–π —Ç–∞ –¥—ñ–∑–Ω–∞–π—Å—è, —â–æ –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ!',
        image: '/secretSurprise.png',
        imageLogo: '/secretSurprise-logo.png',
        rules: '–°–æ—Ç—Ä–∏ 4 —á–∏—Å–ª–∞. –Ø–∫—â–æ —Å–µ—Ä–µ–¥ –Ω–∏—Ö —î –≤–∏–≥—Ä–∞—à–Ω–µ ‚Äî –æ—Ç—Ä–∏–º–∞—î—à –±–æ–Ω—É—Å!',
        cost: 5,
        hourlyProfit: 100,
        experience: 100,
        numberCount: 4,
        failChance: 0.35,
        rewardTiers: [
            { amount: 5, chance: 0.5 },
            { amount: 10, chance: 0.3 },
            { amount: 20, chance: 0.15 },
            { amount: 100, chance: 0.05 }
        ]
    },
    {
        id: 'friendlyFlame',
        type: 'gift',
        name: 'üî• Friendly Flame',
        description: '–ó–∞–ø–∞–ª–∏ –µ–º–æ—Ü—ñ—ó! –ù–∞–¥—ñ—à–ª–∏ –ª–æ—Ç–µ—Ä–µ—é —Ç–æ–º—É, —Ö—Ç–æ –∑–∞—Å–ª—É–≥–æ–≤—É—î –Ω–∞ —É–¥–∞—á—É!',
        image: '/friendlyFlame.png',
        imageLogo: '/friendlyFlame-logo.png',
        rules: '–°–æ—Ç—Ä–∏ 3 —á–∏—Å–ª–∞. –Ø–∫—â–æ —Ö–æ—á–∞ –± –¥–≤–∞ –æ–¥–Ω–∞–∫–æ–≤—ñ ‚Äî –≤–∏–≥—Ä–∞—à —Ç–≤—ñ–π!',
        cost: 10,
        hourlyProfit: 200,
        experience: 200,
        numberCount: 3,
        failChance: 0.4,
        rewardTiers: [
            { amount: 10, chance: 0.5 },
            { amount: 20, chance: 0.3 },
            { amount: 50, chance: 0.15 },
            { amount: 100, chance: 0.05 }
        ]
    },
    {
        id: 'justBecause',
        type: 'gift',
        name: 'üåà Just Because',
        description: '–ë–µ–∑ –ø—Ä–∏—á–∏–Ω–∏ ‚Äî –ø—Ä–æ—Å—Ç–æ –ø–æ–¥–∞—Ä—É–Ω–æ–∫. –ë–æ —ñ–Ω–æ–¥—ñ —Ç–∞–∫ —Ç—Ä–µ–±–∞ üíõ',
        image: '/justBecause.png',
        imageLogo: '/justBecause-logo.png',
        rules: '–°–æ—Ç—Ä–∏ 5 —á–∏—Å–µ–ª. –Ø–∫—â–æ –∑–±—ñ–≥–∞—é—Ç—å—Å—è –∑ —Å–µ–∫—Ä–µ—Ç–Ω–∏–º –∫–æ–¥–æ–º ‚Äî —Ç–∏ –≤–∏–≥—Ä–∞–≤!',
        cost: 20,
        hourlyProfit: 500,
        experience: 500,
        numberCount: 5,
        failChance: 0.5,
        rewardTiers: [
            { amount: 20, chance: 0.5 },
            { amount: 50, chance: 0.3 },
            { amount: 100, chance: 0.15 },
            { amount: 500, chance: 0.05 }
        ]
    },
    {
        id: 'thanksCard',
        type: 'gift',
        name: 'üíå Thanks Card',
        description: '–•–æ—á–µ—à –ø–æ–¥—è–∫—É–≤–∞—Ç–∏ –∫–æ–º—É—Å—å –æ—Å–æ–±–ª–∏–≤–æ–º—É? –ó—Ä–æ–±–∏ —Ü–µ —á–µ—Ä–µ–∑ –ª–æ—Ç–µ—Ä–µ—é üôå',
        image: '/thanksCard.png',
        imageLogo: '/thanksCard-logo.png',
        rules: '–°–æ—Ç—Ä–∏ 4 —Ü–∏—Ñ—Ä–∏. –Ø–∫—â–æ –≤–∏–ø–∞–¥–µ –ø–æ–¥—è–∫–∞ ‚Äî –æ—Ç—Ä–∏–º–∞—î—à –±–æ–Ω—É—Å!',
        cost: 50,
        hourlyProfit: 1000,
        experience: 1000,
        numberCount: 4,
        failChance: 0.35,
        rewardTiers: [
            { amount: 50, chance: 0.5 },
            { amount: 100, chance: 0.3 },
            { amount: 150, chance: 0.15 },
            { amount: 1000, chance: 0.05 }
        ]
    }





];

export const CardsList: FC = () => {
    const { store } = useContext(Context);
    const [selected, setSelected] = useState<null | (typeof lotteries[0] & { origin?: string })>(null);
    const [filter, setFilter] = useState<"coin" | "usdt" | "gift" | "saved">("coin");
    const [savedType, setSavedType] = useState<"purchased" | "received">("purchased");

    const getSavedLotteries = () => {
        if (!store.user) return [];

        if (savedType === "purchased") {
            const counts: Record<string, number> = {};
            store.user.lotteries.purchased.forEach((id: string) => {
                counts[id] = (counts[id] || 0) + 1;
            });

            return Object.entries(counts)
                .map(([id, count]) => {
                    const lottery = lotteries.find((l) => l.id === id);
                    return lottery ? { ...lottery, count } : null;
                })
                .filter(Boolean);
        }

        if (savedType === "received") {
            const counts: Record<string, { count: number; from: string }> = {};

            const unUsed = store.user.lotteries.received.filter((entry: any) => !entry.used);

            unUsed.forEach((entry: { id: string; from: string }) => {
                const key = JSON.stringify({ id: entry.id, from: entry.from });
                if (!counts[key]) {
                    counts[key] = { count: 1, from: entry.from };
                } else {
                    counts[key].count += 1;
                }
            });

            return Object.entries(counts)
                .map(([key, value]) => {
                    const { id, from } = JSON.parse(key);
                    const lottery = lotteries.find((l) => l.id === id);
                    return lottery ? { ...lottery, count: value.count, from } : null;
                })
                .filter(Boolean);
        }

        return [];
    };

    const purchasedCount = store.user?.lotteries.purchased.length || 0;
    const receivedCount = store.user?.lotteries.received.filter(c=>c.used === false).length || 0;
    const totalSaved = purchasedCount + receivedCount;

    const filtered =
        filter === "saved"
            ? getSavedLotteries()
            : lotteries.filter((lottery) => lottery.type === filter);

    return (
        <div className="bg-gradient-to-b from-pink-900 to-purple-900 min-h-screen p-2 pb-20">
            {/* –ì–æ–ª–æ–≤–Ω—ñ —Ñ—ñ–ª—å—Ç—Ä–∏ */}
            <div className="flex justify-around mb-3">
                {[
                    { label: "üí∞–ú–æ–Ω–µ—Ç–∏", value: "coin" },
                    { label: "ü™ôUSDT", value: "usdt" },
                    { label: "üéÅ–ü–æ–¥–∞—Ä—É–Ω–∫–∏", value: "gift" },
                ].map((btn) => (
                    <button
                        key={btn.value}
                        onClick={() => setFilter(btn.value as any)}
                        className={`px-1 py-1 rounded-full text-sm font-medium transition ${
                            filter === btn.value ? "bg-yellow-400 text-black" : "bg-white/20 text-white"
                        }`}
                    >
                        {btn.label}
                    </button>
                ))}

                {/* –ö–Ω–æ–ø–∫–∞ "–ó–±–µ—Ä–µ–∂–µ–Ω—ñ" –∑ –±–µ–π–¥–∂–∏–∫–æ–º */}
                <div className="relative">
                    <button
                        onClick={() => setFilter("saved")}
                        className={`px-1 py-1 rounded-full text-sm font-medium transition ${
                            filter === "saved" ? "bg-yellow-400 text-black" : "bg-white/20 text-white"
                        }`}
                    >
                        ‚úÖ–ó–±–µ—Ä–µ–∂–µ–Ω—ñ
                    </button>
                    <Badge count={totalSaved} />
                </div>
            </div>

            {filter === "saved" && (
                <div className="flex justify-center gap-4 mb-3">
                    <div className="relative">
                        <button
                            onClick={() => setSavedType("purchased")}
                            className={`px-3 py-1 rounded-full text-xs font-medium transition ${
                                savedType === "purchased" ? "bg-yellow-300 text-black" : "bg-white/20 text-white"
                            }`}
                        >
                            –ö—É–ø–ª–µ–Ω—ñ
                        </button>
                        <Badge count={purchasedCount} />
                    </div>

                    <div className="relative">
                        <button
                            onClick={() => setSavedType("received")}
                            className={`px-3 py-1 rounded-full text-xs font-medium transition ${
                                savedType === "received" ? "bg-yellow-300 text-black" : "bg-white/20 text-white"
                            }`}
                        >
                            –û—Ç—Ä–∏–º–∞–Ω—ñ
                        </button>
                        <Badge count={receivedCount} />
                    </div>
                </div>
            )}

            {/* –°–ø–∏—Å–æ–∫ –ª–æ—Ç–µ—Ä–µ–π */}
            <div className="grid grid-cols-2 gap-1">
                {filtered
                    .sort((a: any, b: any) => a.cost - b.cost)
                    .map((lottery: any) => (
                        <div
                            key={lottery.id}
                            onClick={() => setSelected({ ...lottery, origin: filter === "saved" ? savedType : null })}
                        >
                            <Card lottery={lottery} count={lottery.count} from={lottery.from} />
                        </div>
                    ))}
            </div>

            {selected && <CardOverview lottery={selected} onClose={() => setSelected(null)} />}
        </div>
    );
};
