import {FC, useContext, useEffect, useState} from "react";
import {ScratchCardGame} from "./ScratchCardGame";
import {Context} from "../index";

interface LotteryCardProps {
    lottery:any
    maxWin: number;
    onWin?: (amount: number) => void;
}

export const LotteryGame: FC<LotteryCardProps> = ({ lottery, onWin }) => {
    const {store}= useContext(Context)
    const [revealed, setRevealed] = useState(false);
    const [result, setResult] = useState<number | null>(null);
    const [generatedNumbers, setGeneratedNumbers] = useState<number[]>([]);
    const [winNumbers, setWinNumbers] = useState<number[]>([]);

    useEffect(() => {
        const totalNumbers = lottery.numberCount;
        const winCount = Math.max(1, Math.floor(Math.random() * 3) + 1); // –∑–∞–≤–∂–¥–∏ —î 1‚Äì3 –≤–∏–≥—Ä–∞—à–Ω–∏—Ö —á–∏—Å–ª–∞

        // 1. –ì–µ–Ω–µ—Ä—É—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ –≤–∏–≥—Ä–∞—à–Ω—ñ —á–∏—Å–ª–∞
        const winNumbersSet = new Set<number>();
        while (winNumbersSet.size < winCount) {
            winNumbersSet.add(Math.floor(Math.random() * 90) + 10);
        }
        const winNumbersArr = Array.from(winNumbersSet);

        // 2. –í–∏–∑–Ω–∞—á–∞—î–º–æ, —á–∏ –≥—Ä–∞–≤–µ—Ü—å –≤–∏–≥—Ä–∞—î (—á–∏ —Ö–æ—á –æ–¥–Ω–µ –≤–∏–≥—Ä–∞—à–Ω–µ —á–∏—Å–ª–æ –ø–æ—Ç—Ä–∞–ø–∏—Ç—å —É –∑–∞—Ö–æ–≤–∞–Ω—ñ)
        const isWinning = Math.random() < lottery.chance;

        // 3. –ì–µ–Ω–µ—Ä—É—î–º–æ –∑–∞—Ö–æ–≤–∞–Ω—ñ —á–∏—Å–ª–∞
        const generatedSet = new Set<number>();
        if (isWinning) {
            // –í—Å—Ç–∞–≤–ª—è—î–º–æ –≤–∏–ø–∞–¥–∫–æ–≤–µ –≤–∏–≥—Ä–∞—à–Ω–µ —á–∏—Å–ª–æ
            const winningNumber = winNumbersArr[Math.floor(Math.random() * winNumbersArr.length)];
            generatedSet.add(winningNumber);
        }

        // –î–æ–¥–∞—î–º–æ –≤–∏–ø–∞–¥–∫–æ–≤—ñ —á–∏—Å–ª–∞ –¥–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ
        while (generatedSet.size < totalNumbers) {
            const num = Math.floor(Math.random() * 90) + 10;
            generatedSet.add(num);
        }

        const generated = Array.from(generatedSet).sort(() => Math.random() - 0.5); // —Ç—Ä–æ—Ö–∏ –ø–µ—Ä–µ–º—ñ—à—É—î–º–æ

        setGeneratedNumbers(generated);
        setWinNumbers(winNumbersArr);
    }, [lottery]);


    const handleReveal = () => {
        const isWinner = generatedNumbers.some(num => winNumbers.includes(num)); // –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∑–±—ñ–≥

        const reward = isWinner
            ? Math.floor(Math.random() * (lottery.rewardRange[1] - lottery.rewardRange[0] + 1)) + lottery.rewardRange[0]
            : 0;

        setResult(reward);
        if (reward > 0) {
            store.setUser({
                ...store.user,
                balance: store.user.balance + reward,
            });
        }
        onWin?.(reward);
        setRevealed(true);
    };

    return (
        <div className="w-full h-[90vh] flex items-center justify-center">
            {!revealed ? (
                <ScratchCardGame
                    coverImage={lottery.image}
                    winNumbers={winNumbers}
                    numbers={generatedNumbers}
                    onScratchComplete={handleReveal}
                />
            ) : (
                <div className="text-center w-full max-w-md p-6 bg-yellow-300 rounded-2xl shadow text-black">
                    {result && result > 0 ? (
                        <>
                            <div className="text-2xl mb-2">üèÜ –í—ñ—Ç–∞—î–º–æ!</div>
                            <div className="text-4xl font-bold text-green-700">+{result} –º–æ–Ω–µ—Ç</div>
                        </>
                    ) : (
                        <>
                            <div className="text-xl mb-1">üò¢ –ù–µ –ø–æ—â–∞—Å—Ç–∏–ª–æ!</div>
                            <div className="text-sm">–°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑</div>
                        </>
                    )}
                </div>
            )}
        </div>
    );
};